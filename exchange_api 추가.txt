def get_balances(self, contain_req=False):
    '''
def get_balances_tickers(self) :
    """
        내 전체 계좌 티커 조회
        return data
        index_x
        market			            종목 구분 코드 / 화폐를 의미하는 영문 대문자 코드
        balance			            주문가능 금액/수량
        locked			            주문 중 묶여있는 금액/수량
        avg_buy_price	        	매수평균가
        avg_buy_price_modified  	매수평균가 수정 여부
        unit_currency	        	평단가 기준 화폐

        index_y
        trade_date		            최근 거래 일자(UTC)
        trade_time	            	최근 거래 시각(UTC)
        trade_date_kst	        	최근 거래 일자(KST)
        trade_time_kst	        	최근 거래 시각(KST)
        trade_timestamp		        
        opening_price		        시가
        high_price		            고가
        low_price		        	저가
        trade_price	            	종가
        prev_closing_price	    	전일 종가
        change			            EVEN : 보합, RISE : 상승, FALL : 하락
        change_price	           	변화액의 절대값
        change_rate		            변화율의 절대값
        signed_change_price	        부호가 있는 변화액
        signed_change_rate	        부호가 있는 변화율
        trade_volume		        가장 최근 거래량
        acc_trade_price		        누적 거래대금(UTC 0시 기준)
        acc_trade_price_24h	        24시간 누적 거래대금
        acc_trade_volume		    누적 거래량(UTC 0시 기준)
        acc_trade_volume_24h	    24시간 누적 거래량
        highest_52_week_price	    52주 신고가
        highest_52_week_date	    52주 신고가 달성일
        lowest_52_week_price	    52주 신저가
        lowest_52_week_date	        52주 신저가 달성일	
        timestamp		            타임스탬프
    """
    my_tickers = self.get_balances()
    tickers = ""
    for ticker in my_tickers :
        if ticker['currency'] != "KRW" and ticker['currency'] != "VTHO" :
            tickers += "KRW-"+ticker['currency']+","
    tickers = tickers[:-1]

    df_tickers = pd.DataFrame(my_tickers)
    df_tickers = df_tickers.reset_index()
    df_tickers.rename(columns = {'currency' : 'market'}, inplace = True)

    url = "https://api.upbit.com/v1/ticker"
    contents = _call_public_api(url, markets=tickers)
    df = pd.DataFrame(contents[0])
    df = df.reset_index()
    df['market'] = [temp[4:] for temp in df['market']]
    final_df = pd.merge(df_tickers, df, on='market')
    final_df['balance'] = final_df['balance'].astype(float)
    final_df['buy_price'] = round(final_df['balance'] * final_df['avg_buy_price'].astype(float))
    final_df['current_price'] = round(final_df['balance'] * final_df['trade_price'])
    final_df['eva_price'] = round((final_df['balance'] * final_df['trade_price']) - (final_df['balance'] * final_df['avg_buy_price'].astype(float)))
    final_df['eva_percent'] = ((final_df['balance'] * final_df['trade_price']) - (final_df['balance'] * final_df['avg_buy_price'].astype(float)))/(final_df['balance'] * final_df['avg_buy_price'].astype(float))*100
    final_df = final_df.sort_values('current_price', ascending=False)
    # print(final_df)
    return final_df

'''

def get_chance(self, ticker, contain_req=False):
    '''
def get_order_list(self, ticker="KRW-BTC", page=1, limit=100) :
    limit = 5
    """
        마켓별 거래 내역 조회
        return data
        index
        uuid                주문의 고유 아이디
        side                주문 종류
        ord_type            주문 방식
        price               주문 당시 화폐 가격
        state               주문 상태	
        market              마켓의 유일키
        created_at          주문 생성 시간
        volume              사용자가 입력한 주문 양
        remaining_volume    체결 후 남은 주문 양
        reserved_fee        수수료로 예약된 비용
        remaining_fee       남은 수수료
        paid_fee            사용된 수수료
        locked              거래에 사용중인 비용
        executed_volume     체결된 양
        trades_count        해당 주문에 걸린 체결 수
    """
    try:
        url = "https://api.upbit.com/v1/orders"
        data1 = {'market': ticker,
                'states': 'done',
                'page': page,
                'limit': limit,
                'order_by': 'desc'
                }
        headers1 = self._request_headers(data1)
        result1 = _send_get_request(url, headers=headers1, data=data1)
        data2 = {'market': ticker,
                'states': 'cancel',
                'page': page,
                'limit': limit,
                'order_by': 'desc'
                }
        headers2 = self._request_headers(data2)
        result2 = _send_get_request(url, headers=headers2, data=data2)
        results = result1[0]+result2[0]
        results = sorted(results, key=itemgetter('created_at'), reverse=True)
        results = [result for result in results if result['executed_volume']!='0.0']

        for result in results :
            dt  = parse(result['created_at'])
            result['created_at'] = str(dt.date()) + " " + str(dt.time())
            result['side'] = '매도' if result['side'] == 'ask' else '매수'
            result['ord_type'] = '지정가' if result['ord_type'] == 'limit' else '시장가'
            url3 = "https://api.upbit.com/v1/order"
            data3 = {'uuid': result['uuid']}
            headers3 = self._request_headers(data3)
            result3 = _send_get_request(url3, headers=headers3, data=data3)
            result['trades'] = result3[0]['trades'][0]['price']
            result['price'] = float(result['executed_volume'])*float(result['trades'])
            result['cal_price'] = float(result['price']) - float(result['paid_fee']) if result['side'] == '매도' else float(result['price']) + float(result['paid_fee'])

        return results
    except Exception as x:
        print(x.__class__.__name__)
        return None