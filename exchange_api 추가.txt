def get_balances_tickers(self) :
        """
            내 전체 계좌 티커 조회
            return data
            index_x
            market			            종목 구분 코드 / 화폐를 의미하는 영문 대문자 코드
            balance			            주문가능 금액/수량
            locked			            주문 중 묶여있는 금액/수량
            avg_buy_price	        	매수평균가
            avg_buy_price_modified  	매수평균가 수정 여부
            unit_currency	        	평단가 기준 화폐

            index_y
            trade_date		            최근 거래 일자(UTC)
            trade_time	            	최근 거래 시각(UTC)
            trade_date_kst	        	최근 거래 일자(KST)
            trade_time_kst	        	최근 거래 시각(KST)
            trade_timestamp		        
            opening_price		        시가
            high_price		            고가
            low_price		        	저가
            trade_price	            	종가
            prev_closing_price	    	전일 종가
            change			            EVEN : 보합, RISE : 상승, FALL : 하락
            change_price	           	변화액의 절대값
            change_rate		            변화율의 절대값
            signed_change_price	        부호가 있는 변화액
            signed_change_rate	        부호가 있는 변화율
            trade_volume		        가장 최근 거래량
            acc_trade_price		        누적 거래대금(UTC 0시 기준)
            acc_trade_price_24h	        24시간 누적 거래대금
            acc_trade_volume		    누적 거래량(UTC 0시 기준)
            acc_trade_volume_24h	    24시간 누적 거래량
            highest_52_week_price	    52주 신고가
            highest_52_week_date	    52주 신고가 달성일
            lowest_52_week_price	    52주 신저가
            lowest_52_week_date	        52주 신저가 달성일	
            timestamp		            타임스탬프
        """
        my_tickers = self.get_balances()
        tickers = ""
        for ticker in my_tickers :
            if ticker['currency'] != "KRW" and ticker['currency'] != "VTHO" :
                tickers += "KRW-"+ticker['currency']+","
        tickers = tickers[:-1]

        df_tickers = pd.DataFrame(my_tickers)
        df_tickers = df_tickers.reset_index()
        df_tickers.rename(columns = {'currency' : 'market'}, inplace = True)

        url = "https://api.upbit.com/v1/ticker"
        contents = _call_public_api(url, markets=tickers)
        df = pd.DataFrame(contents[0])
        df = df.reset_index()
        df['market'] = [temp[4:] for temp in df['market']]
        final_df = pd.merge(df_tickers, df, on='market')
        final_df['balance'] = final_df['balance'].astype(float)
        final_df['current_price'] = round(final_df['balance'] * final_df['trade_price'])
        final_df = final_df.sort_values('current_price', ascending=False)
        # print(final_df)
        return final_df